{"program@execute@i32-stack-array": {"__type__": "TestResult", "command": "/home/vesely/piglit/bin/cl-program-tester /home/vesely/piglit/tests/cl/program/execute/i32-stack-array.cl", "environment": "PIGLIT_SOURCE_DIR=\"/home/vesely/piglit\" PIGLIT_PLATFORM=\"mixed_glx_egl\"", "err": "", "out": "## Test: i32 stack array (/home/vesely/piglit/tests/cl/program/program-tester.c) ##\n\n# Platform supporting only version 1.1. Running test on that version.\n# Running on:\n#   Platform: Clover\n#   Device: AMD TURKS (DRM 2.50.0 / 5.0.3-200.fc29.x86_64, LLVM 4.0.1)\n#   OpenCL version: 2.0\n#   OpenCL C version: 1.1\n#   Build options:  -cl-std=CL1.1\nProgram has been built successfully\n> Running kernel test: i32 stack array read up\nUsing kernel stack_array_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array read const\nUsing kernel stack_array_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array read down\nUsing kernel stack_array_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array read rand\nUsing kernel stack_array_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array write\nUsing kernel stack_array_write\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array read write\nUsing kernel stack_array_write_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array direct write (IF and ELSE)\nUsing kernel stack_array_write_if_else_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array direct write (IF and ELSE) indirect read up\nUsing kernel stack_array_write_if_else_indirect_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array direct write (IF and ELSE) indirect read const\nUsing kernel stack_array_write_if_else_indirect_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array direct write (IF and ELSE) indirect read down\nUsing kernel stack_array_write_if_else_indirect_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array indirect write (IF and ELSE) direct read\nUsing kernel stack_array_indirect_write_if_else_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array indirect write (IF and ELSE) indirect read up\nUsing kernel stack_array_indirect_write_if_else_indirect_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n> Running kernel test: i32 stack array indirect write (IF and ELSE) indirect read up-down\nUsing kernel stack_array_indirect_write_if_else_indirect_read\nSetting kernel arguments...\nRunning the kernel...\nValidating results...\n Argument 0: PASS\n>> All of the tests PASSED\n# Result:\n", "result": "pass", "returncode": 0, "subtests": {"i32 stack array read up": "pass", "i32 stack array read const": "pass", "i32 stack array read down": "pass", "i32 stack array read rand": "pass", "i32 stack array write": "pass", "i32 stack array read write": "pass", "i32 stack array direct write (if and else)": "pass", "i32 stack array direct write (if and else) indirect read up": "pass", "i32 stack array direct write (if and else) indirect read const": "pass", "i32 stack array direct write (if and else) indirect read down": "pass", "i32 stack array indirect write (if and else) direct read": "pass", "i32 stack array indirect write (if and else) indirect read up": "pass", "i32 stack array indirect write (if and else) indirect read up-down": "pass", "__type__": "Subtests"}, "time": {"start": 1554154303.9888995, "end": 1554154304.7535844, "__type__": "TimeAttribute"}, "exception": null, "traceback": null, "dmesg": "", "pid": [19654]}}